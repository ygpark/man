rule Code_Injection
{
	meta:
			description = "This is [Code Injection] API set"
	strings:
			$a = "GetThreadContext"
			$b = "SetThreadContext"
			$c = "ReadProcessMomory"
			$d = "CreateProcessA"
			$e = "VirtualAllocEx"
			$f = "WriteProcessMemory"
			$g = "ResumeThread"
	condition:
			$a and $b and $c and $d and $e and $f and $g
}

rule Process_Walking
{
	meta:
			description = "This is [Process Walking] API set"
	strings:
			$a = "CreateToolhelp32Snapshot"
			$b = "Process32First"
			$c = "Process32Next"
	condition:
			$a and $b and $c
}

rule DLL_Injection
{
	meta:
		description = "This is [DLl Injection] API set"
	strings:
		$a = "OpenProcess"
		$b = "LoadLibrary"
		$c = "VirtualAllocEx"
		$d = "WriteProcessMemory"
		$e = "CreateRemoteThread"
		$f = "RtlCreateUserThread"
	condition:
		(($a and $b and $c and $d) or $e) or (($a and $b and $c and $d) or $f)
}

rule Registry_Manipulation
{
	meta:
		description = "This is [Registry manipulation] API set"
	strings:
		$a = "RegCreateKey"
		$b = "RegSetValue"
	condition:
		$a and $b
}

rule File_Creation_Manipulation
{
	meta:
		description = "This is [File Creation Manipulation] API set"
	strings:
		$a = "NtCreateFile"
		$b = "NtWriteFile"
		$c = "NtOpenFile"
	condition:
		($a and $b) or ($c and $b)
}

rule Dynamic_Binding
{
	meta:
		description = "This is [Dynamic Binding] API set"
	strings:
		$a = "LoadLibrary"
		$b = "GetProcAddress"
	condition:
		$a and $b
}